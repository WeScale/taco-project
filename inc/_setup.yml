---
- name: check that mandatory vars are supplied
  assert:
    that:
      - vars[item] is defined
      - vars[item] != ''
    msg: "Mandatory variable '{{ item }}' missing"
  with_items:
    - tflayer
    - deploy_env
    - deploy_region
    - tfaction

- name: variable cooking
  set_fact:
    src_layer_dir: "{{ layers_dir }}/{{ tflayer }}"
    taco_all_layers_dir: "{{ target_dir }}/taco"
    target_layer_dir: "{{ target_dir }}/taco/{{ tflayer }}"

- name: check that target terraform layer is found
  stat:
    path: "{{ src_layer_dir }}"
  register: src_layer_dir_scan

- name: check that target terraform layer is found
  assert:
    that:
      - src_layer_dir_scan.stat.exists
      - src_layer_dir_scan.stat.isdir
    msg: "Source layer could not be found: {{ src_layer_dir }}"

- name: create work dir
  file:
    path: "{{ target_layer_dir }}"
    state: directory

- name: check for taco var files
  stat:
    path: "{{ item }}"
  register: taco_vars_scan
  with_items:
    - "{{ playbook_dir }}/defaults.taco.yml"
    - "{{ layers_dir }}/all-layers.taco.yml"
    - "{{ layers_dir }}/{{ tflayer }}/all-env.all-region.taco.yml"
    - "{{ layers_dir }}/{{ tflayer }}/all-env.{{ deploy_region }}.taco.yml"
    - "{{ layers_dir }}/{{ tflayer }}/{{ deploy_env }}.all-region.taco.yml"
    - "{{ layers_dir }}/{{ tflayer }}/{{ deploy_env }}.{{ deploy_region }}.taco.yml"

- name: cooking variables
  set_fact:
    tfvars_addons: >-
      {{
        taco_vars_scan.results
        |selectattr('stat.exists')
        |map(attribute='stat.path')
        |list
      }}

- name: get current_role
  shell:
    aws sts get-caller-identity --output text --query UserId | awk -F ':' '{ print $2 }'
  register: initial_deploy_role_raw

- name: variable cooking
  set_fact:
    initial_deploy_role: "{{ initial_deploy_role_raw.stdout }}"

- name: Include every yml var file linked to tflayer
  include_vars: "{{ item }}"
  with_items: "{{ tfvars_addons }}"

- include_tasks: "{{ item }}"
  with_first_found:
    - files:
        - "{{ layers_dir }}/{{ tflayer }}/taco-setup.yml"
      skip: true
#  when: tfaction != "destroy"

- block:
    - name: get useful var list
      shell: >-
        grep variable *.tf
      args:
        chdir: "{{ src_layer_dir }}"
      register: claimed_vars_sh

    - set_fact:
        claimed_vars: >-
          {{
            claimed_vars|default([])
            + [item | regex_replace('^.*?"(.*?)".*$', '\1')]
          }}
      loop: "{{ claimed_vars_sh.stdout_lines }}"
  rescue:
    - set_fact:
        claimed_vars: []


- name: Create jinja template of claimed variables
  template:
    src: "{{ playbook_dir }}/inc/layer_vars_claim.j2"
    dest: "{{ target_layer_dir }}/taco.tfvars.j2"

- name: create terraform var file (JSON format)
  template:
    src: "{{ target_layer_dir }}/taco.tfvars.j2"
    dest: "{{ target_layer_dir }}/taco.tfvars.json"

- set_fact:
    expected_local_tfstate: "{{ target_layer_dir }}/{{ deploy_env }}.{{ deploy_region }}.tfstate"

- set_fact:
    tf_common_options: >-
      -var-file={{ target_layer_dir }}/taco.tfvars.json
      -state={{ expected_local_tfstate }}
